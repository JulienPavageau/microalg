(load "lib/xml.l")
# TODO: inclure blockly, processing, processingJS, webGL, openGL, swing, NP++
# TODO: checker la nécessité des fill de MACHINE (a pas dans microalg.l)
(setq W "#FFF")  # blanc
(setq R "#F00")  # rouge
(setq V "#0F0")  # vert
(setq B "#00F")  # bleu
(setq N "#000")  # noir
(setq L 800 H 450)
(setq H_rects 45)
(setq L_rects 110)
(setq malg_x_pos 75)
(setq malg_cadre_x_pos 20)
(setq malg-j_x_pos 205)
(setq malg-j_cadre_x_pos 150)
(setq malg-rjs_x_pos 335)
(setq malg-rjs_cadre_x_pos 280)
(setq malg-njs_x_pos 465)
(setq malg-njs_cadre_x_pos 410)
(setq malg-js_browser_x_pos 605)
(setq malg-js_cadre_browser_x_pos 540)
(setq largeur_machine 650)
(setq couche_machine (- H 20))
(setq couche_1 325)
(setq couche_2 280)
(setq couche_3 235)
(setq couche_malg_l 180)
(setq couche_malg 120)
(setq text_conf_small '(text xml:space "preserve" text-anchor "middle" font-family "serif" font-size 18 fill N stroke-width 1))
(setq text_conf_big '(text xml:space "preserve" text-anchor "middle" font-family "serif" font-size 24 fill N stroke-width 1))
(<xmlq> svg width L height H xmlns "http://www.w3.org/2000/svg" xmlns:svg "http://www.w3.org/2000/svg" stroke-width 5 stroke N fill W
    # cadre
    (<xmlq> rect height H width L x 0 y 0)
    # IHM
    (apply <xml> (list (append text_conf_small '(x (/ (+ malg_x_pos malg-njs_x_pos) 2) y 25 (prin "résultat dans la console")))))
    (<xmlq> line x1 (/ (+ malg_x_pos malg-njs_x_pos) 2) y1 35 x2 (/ (+ malg_x_pos malg-njs_x_pos) 2) y2 50 stroke-width 5 stroke N)
    (apply <xml> (list (append text_conf_small '(x (/ (+ malg_x_pos malg-njs_x_pos) 2) y 70 (prin "`malg* fichier.malg` (ou depuis éditeur)")))))
    (apply <xml> (list (append text_conf_small '(x malg-js_browser_x_pos y 25 (prin "HTML")))))
    (<xmlq> line x1 malg-js_browser_x_pos y1 35 x2 malg-js_browser_x_pos y2 50 stroke-width 5 stroke N)
    (apply <xml> (list (append text_conf_small '(x malg-js_browser_x_pos y 70 (prin "formulaire")))))
    # microalg.l
    (<xmlq> rect height H_rects width largeur_machine x malg_cadre_x_pos y (- couche_malg_l 30))
    (apply <xml> (list (append text_conf_big '(x (/ (+ malg_x_pos malg-js_browser_x_pos) 2) y couche_malg_l (prin "microalg.l")))))
    # malg
    (<xmlq> rect height H_rects width L_rects x malg_cadre_x_pos y (- couche_malg 30))
    (apply <xml> (list (append text_conf_big '(x malg_x_pos y couche_malg (prin "malg")))))
    (<xmlq> line x1 malg_x_pos y1 (- couche_malg_l H_rects) x2 malg_x_pos y2 (- couche_malg_l 30) stroke-width 5 stroke N)
    (<xmlq> line x1 malg_x_pos y1 (+ couche_malg_l (/ H_rects 3)) x2 malg_x_pos y2 (+ couche_malg_l 30) stroke-width 5 stroke N)
    (apply <xml> (list (append text_conf_big '(x malg_x_pos y couche_3 (prin "pil")))))
    (apply <xml> (list (append text_conf_big '(x malg_x_pos y couche_2 (prin "PicoLisp")))))
    (<xmlq> line x1 malg_x_pos y1 290 x2 malg_x_pos y2 (- couche_machine 30) stroke-width 5 stroke N)
    # malg-j
    (<xmlq> rect height H_rects width L_rects x malg-j_cadre_x_pos y (- couche_malg 30) stroke-width 5 stroke N fill W)
    (apply <xml> (list (append text_conf_big '(x malg-j_x_pos y couche_malg (prin "malg-j")))))
    (<xmlq> line x1 malg-j_x_pos y1 (- couche_malg_l H_rects) x2 malg-j_x_pos y2 (- couche_malg_l 30) stroke-width 5 stroke N)
    (<xmlq> line x1 malg-j_x_pos y1 (+ couche_malg_l (/ H_rects 3)) x2 malg-j_x_pos y2 (+ couche_malg_l 30) stroke-width 5 stroke N)
    (apply <xml> (list (append text_conf_big '(x malg-j_x_pos y couche_3 (prin "pil-j")))))
    (apply <xml> (list (append text_conf_big '(x malg-j_x_pos y couche_2 (prin "Ersatz")))))
    (<xmlq> line x1 malg-j_x_pos y1 290 x2 malg-j_x_pos y2 350 stroke-width 5 stroke N)
    # malg-rjs
    (<xmlq> rect height H_rects width L_rects x malg-rjs_cadre_x_pos y (- couche_malg 30) stroke-width 5 stroke N fill W)
    (apply <xml> (list (append text_conf_big '(x malg-rjs_x_pos y couche_malg (prin "malg-rjs")))))
    (<xmlq> line x1 malg-rjs_x_pos y1 (- couche_malg_l H_rects) x2 malg-rjs_x_pos y2 (- couche_malg_l 30) stroke-width 5 stroke N)
    (<xmlq> line x1 malg-rjs_x_pos y1 (+ couche_malg_l (/ H_rects 3)) x2 malg-rjs_x_pos y2 (+ couche_malg_l 30) stroke-width 5 stroke N)
    (apply <xml> (list (append text_conf_big '(x malg-rjs_x_pos y couche_3 (prin "pil-rjs")))))
    (apply <xml> (list (append text_conf_big '(x malg-rjs_x_pos y couche_2 (prin "EmuLisp")))))
    (apply <xml> (list (append text_conf_big '(x malg-rjs_x_pos y couche_1 (prin "Rhino")))))
    (<xmlq> line x1 malg-rjs_x_pos y1 335 x2 malg-rjs_x_pos y2 350 stroke-width 5 stroke N)
    # malg-njs
    (<xmlq> rect height H_rects width L_rects x malg-njs_cadre_x_pos y (- couche_malg 30) stroke-width 5 stroke N fill W)
    (apply <xml> (list (append text_conf_big '(x malg-njs_x_pos y couche_malg (prin "malg-njs")))))
    (<xmlq> line x1 malg-njs_x_pos y1 (- couche_malg_l H_rects) x2 malg-njs_x_pos y2 (- couche_malg_l 30) stroke-width 5 stroke N)
    (<xmlq> line x1 malg-njs_x_pos y1 (+ couche_malg_l (/ H_rects 3)) x2 malg-njs_x_pos y2 (+ couche_malg_l 30) stroke-width 5 stroke N)
    (apply <xml> (list (append text_conf_big '(x malg-njs_x_pos y couche_3 (prin "pil-njs")))))
    (apply <xml> (list (append text_conf_big '(x malg-njs_x_pos y couche_2 (prin "EmuLisp")))))
    (apply <xml> (list (append text_conf_big '(x malg-njs_x_pos y couche_1 (prin "NodeJS")))))
    (<xmlq> line x1 malg-njs_x_pos y1 335 x2 malg-njs_x_pos y2 (- couche_machine 30) stroke-width 5 stroke N)
    # web IDE
    (<xmlq> rect height H_rects width 130 x malg-js_cadre_browser_x_pos y (- couche_malg 30) stroke-width 5 stroke N fill W)
    (apply <xml> (list (append text_conf_big '(x malg-js_browser_x_pos y couche_malg (prin "web IDE")))))
    (<xmlq> line x1 malg-js_browser_x_pos y1 (- couche_malg_l H_rects) x2 malg-js_browser_x_pos y2 (- couche_malg_l 30) stroke-width 5 stroke N)
    (<xmlq> line x1 malg-js_browser_x_pos y1 (+ couche_malg_l (/ H_rects 3)) x2 malg-js_browser_x_pos y2 250 stroke-width 5 stroke N)
    (apply <xml> (list (append text_conf_big '(x malg-js_browser_x_pos y couche_2 (prin "EmuLisp")))))
    (apply <xml> (list (append text_conf_big '(x malg-js_browser_x_pos y couche_1 (prin "browser")))))
    (<xmlq> line x1 malg-js_browser_x_pos y1 335 x2 malg-js_browser_x_pos y2 (- couche_machine 30) stroke-width 5 stroke N)
    # JVM
    (<xmlq> rect fill W stroke N stroke-width 5 x (- malg-j_x_pos 30) y (- couche_machine 80) width (+ (- malg-rjs_x_pos malg-j_x_pos) 60) height 40)
    (apply <xml> (list (append text_conf_big '(x (/ (+ malg-j_x_pos malg-rjs_x_pos) 2) y (- couche_machine 52) (prin "JVM")))))
    # Machine
    (<xmlq> rect fill W stroke N stroke-width 5 x malg_cadre_x_pos y (- couche_machine 30) width largeur_machine height 40)
    (apply <xml> (list (append text_conf_big '(x 300 y couche_machine (prin "MACHINE")))))
)
(bye)

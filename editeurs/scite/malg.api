+ x1 x2 ...: Additionne les nombres fournis en paramètre.
- x1 x2: Soustrait x2 de x1.
* x1 x2 ...: Multiplie les nombres fournis en paramètre.
/ x1 x2: Divise x1 par x2.
% n1 n2: Reste de la division euclidienne de n1 par n2.
** x1 x2: Met x1 à la puissance x2.
!!! "texte": Commentaire.
= val1 val2 ...: Comparaison : val1 = val2.
=/ val1 val2 ...: Comparaison : val1 =/ val2.
< val1 val2 ...: Comparaison : val1 < val2.
<= val1 val2 ...: Comparaison : val1 <= val2.
> val1 val2 ...: Comparaison : val1 > val2.
>= val1 val2 ...: Comparaison : val1 >= val2.
? Symbole remplaçant la commande à tester dans `Exemples_de`.
Affecter_a var val [En_position idx]: Affectation de la valeur `val` à la variable `var`.
Afficher val: Affiche la valeur `val`.
Aide sym: Aide sur le symbole `sym`.
Ajouter_a obj: Affecte un nouvel élément à la fin de `obj` (après le dernier élément).
Alors : Mot-clef intermédiaire d'un `Si`.
Booleen? val: Teste si `val` est un booléen.
Concatener val1 val2 ...: Met bout à bout les textes ou valeurs.
Definir (commande args) doc auteur instructions : Permet de définir des commandes.
Demander : Retourne le texte tapé par l'utilisateur.
En_position : Mot-clef intermédiaire pour la commande `Affecter_a`.
Entier@ min max : Retourne un entier pseudo-aléatoire entre `min` et `max`.
Et b1 b2 ...: Opération logique.
Exemples_de commande [liste d’exemples]: Permet de lire ou écrire les exemples-tests d’une commande.
Faire instructions Tant_que test: Boucle où `instructions` s’exécutent tant que `test` est `Vrai`.
Faux : Booléen.
Faux? val: Teste si `val` est Faux.
Initialiser var val: Initialise la variable `var` avec la valeur `val`.
Initialiser@ [val]: Initialise le générateur de valeurs pseudo-aléatoires.
Liste [élements] : Construit une liste avec les paramètres fournis.
Longueur val: Donne la longueur d'une liste ou d'un texte.
Millisecondes: Donne le nombre de millisecondes écoulées depuis le début de l’exécution du programme.
Nieme val pos: Retourne l'élément à la position `pos` dans la valeur `val`.
Nieme@ val : Retourne un élément pseudo-aléatoire dans `val`.
Nombre val: Convertit `val` en nombre.
Nombre? val: Teste si `val` est un nombre.
Non b: Opération logique.
Ou b1 b2 ...: Opération logique.
Queue val: Retourne `val` (liste ou texte), privé de son premier élément.
Retirer_de obj: Retire le dernier élément à la fin de `obj` et le retourne.
Retourner val: À utiliser à la fin de la définition d'une commande.
Rien : Valeur représentant l'absence de valeur.
Si test Alors instructions1 [Sinon instructions2]: Exécution conditionnelle.
Sinon : Mot-clef intermédiaire d'un `Si`.
Tant_que test Faire instructions: Boucle où `instructions` s’exécutent tant que `test` est `Vrai`.
Tester cmd: Vérifie que les exemples de la commande passée en argument sont conformes.
Tete val: Retourne le premier élément de `val` (liste ou texte).
Texte val: Convertit `val` en texte.
Texte? val: Teste si `val` est un texte.
Type val: Retourne le type de la valeur `val`.
Vide? val: Teste si `val` est vide.
Vrai : Booléen.
Vrai? val: Teste si `val` est Vrai.

+ x1 x2 ...: Additionne les nombres fournis en paramètre.
- x1 x2: Soustrait x2 de x1.
* x1 x2 ...: Multiplie les nombres fournis en paramètre.
/ x1 x2: Divise x1 par x2.
% n1 n2: Reste de la division euclidienne de n1 par n2.
** x1 x2: Met x1 à la puissance x2.
!!! "texte": Commentaire.
= val1 val2 ...: Comparaison : val1 = val2.
=/ val1 val2 ...: Comparaison : val1 =/ val2.
< val1 val2 ...: Comparaison : val1 < val2.
<= val1 val2 ...: Comparaison : val1 <= val2.
> val1 val2 ...: Comparaison : val1 > val2.
>= val1 val2 ...: Comparaison : val1 >= val2.
Affecter_a var val: Affectation de la valeur `val` à la variable `var`.
Afficher val: Affiche la valeur `val`.
Aide sym: Aide sur le symbole `sym`.
Alors: Mot-clef intermédiaire d'un `Si`.
Booleen? val: Teste si `val` est un booléen.
Concatener val1 val2 ...: Met bout à bout les textes ou valeurs.
Definir: Permet de définir des commandes.
Demander: Retourne le texte tapé par l¿utilisateur.
Et b1 b2 ...: Opération logique.
Faire instructions Tant_que test: Boucle.
Faux: Booléen.
Faux?: Teste si `val` est Faux.
Initialiser var val: Initialise la variable `var` avec la valeur `val`.
Longueur val: Donne la longueur d'une liste ou d'un texte.
Nieme val pos: Retourne l'élément à la position `pos` dans la valeur `val`.
Nombre val: Convertit `val` en nombre.
Nombre?: Teste si `val` est un nombre.
Non b ...: Opération logique.
Ou b1 b2 ...: Opération logique.
Queue val: Retourne `val` (liste ou texte), privé de son premier élément.
Retourner: À utiliser à la fin de la définition d'une commande.
Rien: Valeur représentant l'absence de valeur.
Si test Alors instructions1 (Sinon instructions2): Exécution conditionnelle.
Sinon: Mot-clef intermédiaire d'un `Si`.
Tant_que test Faire instructions: Boucle.
Tete val: Retourne le premier élément de `val` (liste ou texte).
Texte val: Convertit `val` en texte.
Texte? val: Teste si `val` est un texte.
Type val: Retourne le type de la valeur `val`.
Vide? val: Teste si `val` est vide.
Vrai: Booléen.
Vrai? val: Teste si `val` est Vrai.

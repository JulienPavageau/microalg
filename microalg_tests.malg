(setq !testing T)
(let (Goods 0 Bads 0)
    (mapc
        '((BoolExpr)
            (if (<> (eval BoolExpr) Faux)
                (if (<> 'or (car BoolExpr)) (inc 'Goods))
                (inc 'Bads)
                (println 'Error: BoolExpr 'Result:
                                     (if (<> 'let (car BoolExpr))
                                         (eval (caddr BoolExpr))
                                         (eval (caddr (caddr BoolExpr)))
                                     )
                )
            )
        )
        (list
            '(= "0.1.1" version)
            # Affichage
            '(= "Bonjour tout le monde !" (prog (Afficher "Bonjour tout le monde !") *LastStdOut))
            '(= "Deux" (prog (Afficher "Un") (Afficher "Deux") *LastStdOut))
            '(= "Commande `Afficher`." (prog (setq *LastStdOut "") (Afficher Afficher) *LastStdOut))
            # Concaténation
            '(= "" (Concatener))
            '(= "" (Concatener ""))
            '(= "" (Concatener "" ""))
            '(= "hello world" (Concatener "hello " "world"))
            '(= "Salut tout le monde!" (Concatener "Salut " "tout " "le " "monde!"))
            '(= "àéèîïôü" (Concatener "à" "é" "è" "î" "ï" "ô" "ü" ))
            # Gestion des variables
            '(let (x NIL) (= 0 (prog (setq x 0) x)))
            '(let (x NIL) (= 0 (prog (Initialiser x 0) x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= 0 (prog (Initialiser x (+ 0 0)) x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= 1 (prog (Initialiser x 0) (Affecter_a x 1) x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "salut" (prog (Initialiser x "salut") x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "" (prog (Initialiser x "") x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "" (prog (Initialiser x "salut") (Affecter_a x "") x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "salut" (prog (Initialiser x "") (Affecter_a x "salut") x)))
            '(or (put 'x 'type NIL) T)
            # Types et conversions
            '(= "texte" (Type "bonjour"))
            '(= "nombre" (Type 0))
            '(= "booleen" (Type Vrai))
            '(= "booleen" (Type Faux))
            '(= "0" (Texte "0"))
            '(= "0" (Texte 0))
            '(= 0 (Nombre 0))
            '(= 0 (Nombre "0"))
            '(= Rien (Nombre "a"))
            '(let (x NIL) (= "texte" (prog (Initialiser x "bonjour") (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "nombre" (prog (Initialiser x 0) (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "booleen" (prog (Initialiser x Vrai) (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "booleen" (prog (Initialiser x Faux) (Type x))))
            '(or (put 'x 'type NIL) T)
            # Manipulations de texte
            '(= 0 (Longueur ""))
            '(= 5 (Longueur "salut"))
            '(= Vrai (Vide? ""))
            '(= Faux (Vide? "pas vide"))
            '(= "a" (Nieme "salut" 2))
            '(= "s" (Tete "salut"))
            '(= "alut" (Queue "salut"))
            '(= "x" (Tete "x"))
            '(= "" (Queue "x"))
            # Structure conditionnelle
            '(= 1 (Si Vrai Alors 1 Sinon 0))
            '(= 0 (Si Faux Alors 1 Sinon 0))
            '(= Rien (Si Faux Alors 1))
            '(= 1 (Si Vrai Alors (setq x 0) (setq x (+ x 1))))
            '(= 1 (Si Faux Alors Rien Sinon (setq x 0) (setq x (+ x 1))))
            # Opérations logiques
            '(= Vrai (Non Faux))
            '(= Faux (Non Vrai))
            '(= Faux (Et Faux Faux))
            '(= Faux (Et Faux Vrai))
            '(= Faux (Et Vrai Faux))
            '(= Vrai (Et Vrai Vrai))
            '(= Faux (Ou Faux Faux))
            '(= Vrai (Ou Faux Vrai))
            '(= Vrai (Ou Vrai Faux))
            '(= Vrai (Ou Vrai Vrai))
            # Structures itératives
            '(= Rien (Tant_que Faux Faire (quit "bug dans Tant_que")))
            '(let (x 3) (= 0 (prog (Tant_que (=/ x 0) Faire (setq x (- x 1))) x)))
            '(let (x 3) (= 0 (prog (Faire (setq x (- x 1)) Tant_que (=/ x 0)) x)))
            '(let (x 3) (= 2 (prog (Faire (setq x (- x 1)) Tant_que Faux) x)))
            '(let (x 3 y 0) (= 3 (prog (Tant_que (=/ x 0) Faire (setq x (- x 1)) (setq y (+ y 1))) y)))
            '(let (x 3 y 0) (= 3 (prog (Faire (setq x (- x 1)) (setq y (+ y 1)) Tant_que (=/ x 0)) y)))
            # Commandes utilisateur
            '(let (f NIL) (= 14 (prog
                                  (Definir (f x) (Retourner (* 2 x)))
                                  (f 7) )
                          ))
            '(let (f NIL) (= "Commande `f`, définie par *un auteur anonyme*."
                             (prog
                                  (Definir (f) (Retourner Rien))
                                  (Afficher f)
                                   *LastStdOut)
                          ))
            '(let (f NIL) (= "Commande `f`, définie par *anonyme*."
                             (prog
                                  (Definir (f) "doc" "anonyme" (Retourner Rien))
                                  (Afficher f)
                                   *LastStdOut)
                          ))
            '(let (f NIL) (= "Aide pour `f` :  ^J`(f x y z)` : doc"
                             (prog
                                  (Definir (f x y z) "doc" (Retourner Rien))
                                  (Aide f))
                          ))
            # Prédicats
            '(= Vrai (= Vrai Vrai))
            '(= Faux (= Vrai Faux))
            '(= Faux (=/ Vrai Vrai))
            '(= Vrai (=/ Vrai Faux))
            '(= Vrai (= "Vrai" "Vrai"))
            '(= Faux (= "Vrai" "Faux"))
            '(= Faux (=/ "Vrai" "Vrai"))
            '(= Vrai (=/ "Vrai" "Faux"))
            '(= Faux (< 0 0))
            '(= Vrai (< 0 1))
            '(= Faux (< 1 0))
            '(= Vrai (<= 0 0))
            '(= Vrai (<= 0 1))
            '(= Faux (<= 1 0))
            '(= Faux (> 0 0))
            '(= Faux (> 0 1))
            '(= Vrai (> 1 0))
            '(= Vrai (>= 0 0))
            '(= Faux (>= 0 1))
            '(= Vrai (>= 1 0))
            '(= 1 (Si (Vrai? Vrai) Alors 1 Sinon 0))
            '(= 0 (Si (Vrai? Faux) Alors 1 Sinon 0))
            '(= 1 (Si (Faux? Faux) Alors 1 Sinon 0))
            '(= 0 (Si (Faux? Vrai) Alors 1 Sinon 0))
            '(= Vrai (Texte? "0"))
            '(= Faux (Texte? 0))
            '(= Vrai (Nombre? 0))
            '(= Faux (Nombre? "0"))
            '(= Vrai (Booleen? Vrai))
            '(= Vrai (Booleen? Faux))
            '(= Faux (Booleen? 0))
            '(= Vrai (Vide? ""))
            '(= Faux (Vide? "salut"))
            ) )
    (println (pack "Tests: " (+ Goods Bads) ", Errors: " Bads))
    (if (= 0 Bads) (bye 0) (bye 1)) )

(let (Goods 0 Bads 0)
	(mapc
		'((BoolExpr)
			(if (<> (eval BoolExpr) Faux)
				(inc 'Goods)
				(inc 'Bads) (println 'Error: BoolExpr 'Result: (eval (caddr BoolExpr))) ) )
		(list
			'(= "0.1.0" version)
            # Blocs
            '(= 1 (Bloc (setq x 0) (setq x (+ x 1))))
            # Affichage
			'(= "Bonjour tout le monde !" (prog (Afficher "Bonjour tout le monde !") *LastStdOut))
			'(= "Deux" (prog (Afficher "Un") (Afficher "Deux") *LastStdOut))
			'(= "Commande 'Afficher'." (prog (setq *LastStdOut "") (Afficher Afficher) *LastStdOut))
            # Concaténation
            '(= "" (Concatener))
            '(= "" (Concatener ""))
            '(= "" (Concatener "" ""))
            '(= "hello world" (Concatener "hello " "world"))
            '(= "Salut tout le monde!" (Concatener "Salut " "tout " "le " "monde!"))
            '(= "àéèîïôü" (Concatener "à" "é" "è" "î" "ï" "ô" "ü" ))
            # Gestion des variables
            '(let (x NIL) (= 0 (prog (setq x 0) x)))
            '(let (x NIL) (= 0 (prog (Affecter_a x 0) x)))
            '(let (x NIL) (= 0 (prog (Affecter_a x (+ 0 0)) x)))
            # Structure conditionnelle
            '(= 1 (Si Vrai 1 0))
            '(= 0 (Si Faux 1 0))
            '(= Rien (Si Faux 1))
            '(= 1 (Si Vrai (Bloc (setq x 0) (setq x (+ x 1)))))
            '(= 1 (Si Faux Rien (Bloc (setq x 0) (setq x (+ x 1)))))
            # Structures itératives
			'(= Rien (Tant_que Faux Faire 0))
			'(let (x 3) (= 0 (Tant_que (=/ x 0) Faire (setq x (- x 1)))))
			'(let (x 3) (= Rien (Tant_que Faux Faire (setq x (- x 1)))))
			'(let (x 3) (= 0 (Faire (setq x (- x 1)) Tant_que (=/ x 0))))
			'(let (x 3) (= 2 (Faire (setq x (- x 1)) Tant_que Faux)))
            # Conversions
            '(= "0" (Texte "0"))
            '(= "0" (Texte 0))
            '(= 0 (Nombre 0))
            '(= 0 (Nombre "0"))
            '(= Rien (Nombre "a"))
            # Prédicats
            '(= Vrai (= Vrai Vrai))
            '(= Faux (= Vrai Faux))
            '(= Faux (=/ Vrai Vrai))
            '(= Vrai (=/ Vrai Faux))
            '(= Faux (< 0 0))
            '(= Vrai (< 0 1))
            '(= Faux (< 1 0))
            '(= Vrai (<= 0 0))
            '(= Vrai (<= 0 1))
            '(= Faux (<= 1 0))
            '(= Faux (> 0 0))
            '(= Faux (> 0 1))
            '(= Vrai (> 1 0))
            '(= Vrai (>= 0 0))
            '(= Faux (>= 0 1))
            '(= Vrai (>= 1 0))
            '(= 1 (Si (Vrai? Vrai) 1 0))
            '(= 0 (Si (Vrai? Faux) 1 0))
            '(= 1 (Si (Faux? Faux) 1 0))
            '(= 0 (Si (Faux? Vrai) 1 0))
            '(= Vrai (Texte? "0"))
            '(= Faux (Texte? 0))
            '(= Vrai (Nombre? 0))
            '(= Faux (Nombre? "0"))
			) )
	(println (pack "Tests: " (+ Goods Bads) ", Errors: " Bads))
	(if (= 0 Bads) (bye 0) (bye 1)) )

(let (Goods 0 Bads 0)
	(mapc
		'((BoolExpr)
			(if (eval BoolExpr)
				(inc 'Goods)
				(inc 'Bads) (println 'Error: BoolExpr 'Result: (eval (caddr BoolExpr))) ) )
		(list
			'(= "0.1.0" version)
            # Affichage
			'(= "Bonjour tout le monde !" (prog (Afficher "Bonjour tout le monde !") *LastStdOut))
			'(= "Deux" (prog (Afficher "Un") (Afficher "Deux") *LastStdOut))
			'(= "Commande 'Afficher'." (prog (setq *LastStdOut "") (Afficher Afficher) *LastStdOut))
            # Concaténation
            '(= "" (Concaténer))
            '(= "" (Concaténer ""))
            '(= "" (Concaténer "" ""))
            '(= "hello world" (Concaténer "hello " "world"))
            '(= "Salut tout le monde!" (Concaténer "Salut " "tout " "le " "monde!"))
            '(= "àéèîïôü" (Concaténer "à" "é" "è" "î" "ï" "ô" "ü" ))
            # Gestion des variables
            '(let (x NIL) (= 0 (prog (setq x 0) x)))
            '(let (x NIL) (= 0 (prog (Affecter_a x 0) x)))
            '(let (x NIL) (= 0 (prog (Affecter_a x (+ 0 0)) x)))
            # Structure conditionnelle
            '(= 1 (Si Vrai 1 0))
            '(= 0 (Si Faux 1 0))
            # Conversions
            '(= "0" (Texte "0"))
            '(= "0" (Texte 0))
            '(= 0 (Nombre 0))
            '(= 0 (Nombre "0"))
            # Prédicats
            '(= 1 (Si (Vrai? Vrai) 1 0))
            '(= 0 (Si (Vrai? Faux) 1 0))
            '(= 1 (Si (Faux? Faux) 1 0))
            '(= 0 (Si (Faux? Vrai) 1 0))
            '(= Vrai (Texte? "0"))
            '(= Faux (Texte? 0))
            '(= Vrai (Nombre? 0))
            '(= Faux (Nombre? "0"))
			) )
	(println (pack "Tests: " (+ Goods Bads) ", Errors: " Bads))
	(if (= 0 Bads) (bye 0) (bye 1)) )

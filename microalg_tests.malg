(setq !testing T)
(setq tests
        (list
            '(= "0.2.4" version)
            # Affichage
            '(= "Bonjour tout le monde !" (prog (Afficher "Bonjour tout le monde !") *LastStdOut))
            '(= "Deux" (prog (Afficher "Un") (Afficher "Deux") *LastStdOut))
            '(= "Commande `Afficher`." (prog (setq *LastStdOut "") (Afficher Afficher) *LastStdOut))
            '(= "Rien" (prog (setq *LastStdOut "") (Afficher Rien) *LastStdOut))
            '(= "Vrai" (prog (setq *LastStdOut "") (Afficher Vrai) *LastStdOut))
            '(= "Faux" (prog (setq *LastStdOut "") (Afficher Faux) *LastStdOut))
            # Concaténation
            '(= "" (Concatener))
            '(= "" (Concatener ""))
            '(= "" (Concatener "" ""))
            '(= "hello world" (Concatener "hello " "world"))
            '(= "Salut tout le monde!" (Concatener "Salut " "tout " "le " "monde!"))
            '(= "hello world" (prog (Afficher (Concatener "hello " "world")) *LastStdOut))
            '(= "àéèîïôü" (Concatener "à" "é" "è" "î" "ï" "ô" "ü" ))
            # Gestion des variables
            '(let (x NIL) (= 0 (prog (setq x 0) x)))
            '(let (x NIL) (= 0 (prog (Initialiser x 0) x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= 0 (prog (Initialiser x (+ 0 0)) x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= 1 (prog (Initialiser x 0) (Affecter_a x 1) x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "salut" (prog (Initialiser x "salut") x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "" (prog (Initialiser x "") x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "" (prog (Initialiser x "salut") (Affecter_a x "") x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "salut" (prog (Initialiser x "") (Affecter_a x "salut") x)))
            '(or (put 'x 'type NIL) T)
            # Affectation à un élément d’une variable de type liste ou texte
            '(let (x NIL) (= "salut" (prog (Initialiser x "saluz") (Affecter_a x "t" En_position 5) x)))
            '(or (put 'x 'type NIL) T)
            # Types et conversions
            '(= "texte" (Type "bonjour"))
            '(= "texte" (Type ""))
            '(= "nombre" (Type 0))
            '(= "booleen" (Type Vrai))
            '(= "booleen" (Type Faux))
            '(= "0" (Texte "0"))
            '(= "0" (Texte 0))
            '(= 0 (Nombre 0))
            '(= 0 (Nombre "0"))
            '(= Rien (Nombre "a"))
            '(= "Vrai" (Texte Vrai))
            '(= "Faux" (Texte Faux))
            '(= "Rien" (Texte Rien))
            '(= "(Liste)" (Texte (Liste)))
            '(= "(Liste 2 4 6)" (Texte (Liste 2 4 6)))
            '(let (x NIL) (= "texte" (prog (Initialiser x "bonjour") (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "texte" (prog (Initialiser x "") (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "nombre" (prog (Initialiser x 0) (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "booleen" (prog (Initialiser x Vrai) (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "booleen" (prog (Initialiser x Faux) (Type x))))
            '(or (put 'x 'type NIL) T)
            # Manipulations de texte
            '(= 0 (Longueur ""))
            '(= 5 (Longueur "salut"))
            '(= Vrai (Vide? ""))
            '(= Faux (Vide? "pas vide"))
            '(= "a" (Nieme "salut" 2))
            '(= "t" (Nieme "salut" 5))
            '(= "a" (Nieme "salut" (+ 1 1)))
            '(= "s" (Tete "salut"))
            '(= "alut" (Queue "salut"))
            '(= "x" (Tete "x"))
            '(= "" (Queue "x"))
            # Structure conditionnelle
            '(= 1 (Si Vrai Alors 1 Sinon 0))
            '(= 0 (Si Faux Alors 1 Sinon 0))
            '(= Rien (Si Faux Alors 1))
            '(= 1 (Si Vrai Alors (setq x 0) (setq x (+ x 1))))
            '(= 1 (Si Faux Alors Rien Sinon (setq x 0) (setq x (+ x 1))))
            # Opérations logiques
            '(= Vrai (Non Faux))
            '(= Faux (Non Vrai))
            '(= Faux (Et Faux Faux))
            '(= Faux (Et Faux Vrai))
            '(= Faux (Et Vrai Faux))
            '(= Vrai (Et Vrai Vrai))
            '(= Faux (Ou Faux Faux))
            '(= Vrai (Ou Faux Vrai))
            '(= Vrai (Ou Vrai Faux))
            '(= Vrai (Ou Vrai Vrai))
            # Structures itératives
            '(= Rien (Tant_que Faux Faire (quit "bug dans Tant_que")))
            '(let (x 3) (= 0 (prog (Tant_que (=/ x 0) Faire (setq x (- x 1))) x)))
            '(let (x 3) (= 0 (prog (Faire (setq x (- x 1)) Tant_que (=/ x 0)) x)))
            '(let (x 3) (= 2 (prog (Faire (setq x (- x 1)) Tant_que Faux) x)))
            '(let (x 3 y 0) (= 3 (prog (Tant_que (=/ x 0) Faire (setq x (- x 1)) (setq y (+ y 1))) y)))
            '(let (x 3 y 0) (= 3 (prog (Faire (setq x (- x 1)) (setq y (+ y 1)) Tant_que (=/ x 0)) y)))
            # Commandes utilisateur
            '(let (f NIL) (= 14 (prog
                                  (Definir (f x) (Retourner (* 2 x)))
                                  (f 7) )
                          ))
            '(let (f NIL) (= "Commande `f`, définie par *un auteur anonyme*."
                             (prog
                                  (Definir (f) (Retourner Rien))
                                  (Afficher f)
                                   *LastStdOut)
                          ))
            '(let (f NIL) (= "Commande `f`, définie par *anonyme*."
                             (prog
                                  (Definir (f) "doc" "anonyme" (Retourner Rien))
                                  (Afficher f)
                                   *LastStdOut)
                          ))
            '(let (f NIL) (= "Aide pour `f` :  ^J`(f x y z)` : doc"
                             (prog
                                  (Definir (f x y z) "doc" (Retourner Rien))
                                  (Aide f))
                          ))
            # Prédicats
            '(= Vrai (= Vrai Vrai))
            '(= Faux (= Vrai Faux))
            '(= Faux (=/ Vrai Vrai))
            '(= Vrai (=/ Vrai Faux))
            '(= Vrai (= "Vrai" "Vrai"))
            '(= Faux (= "Vrai" "Faux"))
            '(= Faux (=/ "Vrai" "Vrai"))
            '(= Vrai (=/ "Vrai" "Faux"))
            '(= Faux (= Vrai "Vrai"))
            '(= Faux (= Faux "Faux"))
            '(= Faux (< 0 0))
            '(= Vrai (< 0 1))
            '(= Faux (< 1 0))
            '(= Vrai (<= 0 0))
            '(= Vrai (<= 0 1))
            '(= Faux (<= 1 0))
            '(= Faux (> 0 0))
            '(= Faux (> 0 1))
            '(= Vrai (> 1 0))
            '(= Vrai (>= 0 0))
            '(= Faux (>= 0 1))
            '(= Vrai (>= 1 0))
            '(= 1 (Si (Vrai? Vrai) Alors 1 Sinon 0))
            '(= 0 (Si (Vrai? Faux) Alors 1 Sinon 0))
            '(= 0 (Si (Vrai? 0) Alors 1 Sinon 0))
            '(= 1 (Si (Faux? Faux) Alors 1 Sinon 0))
            '(= 0 (Si (Faux? Vrai) Alors 1 Sinon 0))
            '(= 0 (Si (Faux? 0) Alors 1 Sinon 0))
            '(= Vrai (Texte? "0"))
            '(let (x NIL) (= Vrai (prog (Initialiser x "0") (Texte? x))))
            '(or (put 'x 'type NIL) T)
            '(= Faux (Texte? 0))
            '(let (x NIL) (= Faux (prog (Initialiser x 0) (Texte? x))))
            '(or (put 'x 'type NIL) T)
            '(= Vrai (Texte? ""))
            '(let (x NIL) (= Vrai (prog (Initialiser x "") (Texte? x))))
            '(or (put 'x 'type NIL) T)
            '(= Faux (Texte? (Liste)))
            '(let (x NIL) (= Faux (prog (Initialiser x (Liste)) (Texte? x))))
            '(or (put 'x 'type NIL) T)
            '(= Vrai (Nombre? 0))
            '(= Faux (Nombre? "0"))
            '(= Faux (Nombre? ""))
            '(= Faux (Nombre? (Liste)))
            '(= Vrai (Booleen? Vrai))
            '(= Vrai (Booleen? Faux))
            '(= Faux (Booleen? 0))
            # Manipulations de listes
            '(let (x NIL) (= "(Liste 2 4 6)" (prog (Initialiser x (Liste 2 4 0)) (Affecter_a x 6 En_position 3) (!text x))))
            '(or (put 'x 'type NIL) T)
            '(= "liste" (Type (Liste)))
            '(= "(Liste)" (prog (Afficher (Liste)) *LastStdOut))
            '(= "(Liste Rien)" (prog (Afficher (Liste Rien)) *LastStdOut))
            '(= "(Liste \"\")" (prog (Afficher (Liste "")) *LastStdOut))
            '(= "(Liste 1 2 3)" (prog (Afficher (Liste 1 2 3)) *LastStdOut))
            '(let (x NIL) (= "(Liste 1 2 3)" (prog (Initialiser x 1) (Afficher (Liste x 2 3)) *LastStdOut)))
            '(or (put 'x 'type NIL) T)
            '(= "(Liste 1 2 (Liste 3 4))" (prog (Afficher (Liste 1 2 (Liste 3 4))) *LastStdOut))
            '(let (x NIL) (= "(Liste 1 2 (Liste 3 1))" (prog (Initialiser x 1) (Afficher (Liste x 2 (Liste 3 x))) *LastStdOut)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "(Liste 1 2 (Liste 3 4))" (prog (Initialiser x (Liste 3 4)) (Afficher (Liste 1 2 x)) *LastStdOut)))
            '(or (put 'x 'type NIL) T)
            '(= "(Liste 1 2 (Liste 3 (Liste 4 5)))" (prog (Afficher (Liste 1 2 (Liste 3 (Liste 4 5)))) *LastStdOut))
            '(or (put 'x 'type NIL) T)
            '(= "(Liste 1 \"bonjour\" Vrai)" (prog (Afficher (Liste 1 "bonjour" Vrai)) *LastStdOut))
            '(= "(Liste \"bonjour\" (Liste \"salut\"))" (prog (Afficher (Liste "bonjour" (Liste "salut"))) *LastStdOut))
            # Manipulations de listes en // avec manipulations de texte
            '(= 0 (Longueur (Liste)))
            '(= 3 (Longueur (Liste 1 2 3)))
            '(= 3 (Longueur (Liste 1 2 (Liste 3 4))))
            '(= Vrai (Vide? (Liste)))
            '(= Faux (Vide? (Liste 1)))
            '(= 10 (Nieme (Liste 10 20) 1))
            '(= 20 (Nieme (Liste 10 20) 2))
            '(= 20 (Nieme (Liste 10 20) (+ 1 1)))
            '(= 10 (Tete (Liste 10 20 30)))
            '(= "(Liste 20 30)" (!text (Queue (Liste 10 20 30))))
            '(= 10 (Tete (Liste 10)))
            '(= "(Liste)" (!text (Queue (Liste 10))))
            '(let (x NIL) (= '(Rien "(Liste 1)") (prog (Initialiser x (Liste)) (list (Ajouter_a x 1) (!text x)))))
            '(let (x NIL) (= '(Rien "(Liste 1 2)") (prog (Initialiser x (Liste 1)) (list (Ajouter_a x 2) (!text x)))))
            '(let (x NIL) (= '(1 "(Liste)") (prog (Initialiser x (Liste 1)) (list (Retirer_de x) (!text x)))))
            '(let (x NIL) (= '(3 "(Liste 1 2)") (prog (Initialiser x (Liste 1 2 3)) (list (Retirer_de x) (!text x)))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '(Rien "a") (prog (Initialiser x "") (list (Ajouter_a x "a") x))))
            '(let (x NIL) (= '(Rien "abcd") (prog (Initialiser x "abc") (list (Ajouter_a x "d") x))))
            '(let (x NIL) (= '("a" "") (prog (Initialiser x "a") (list (Retirer_de x) x))))
            '(let (x NIL) (= '("d" "abc") (prog (Initialiser x "abcd") (list (Retirer_de x) x))))
            '(or (put 'x 'type NIL) T)
            # Pseudo-aléatoire
            '(= 0 (Entier@ 0 0))
            '(= 0 (Nieme@ (Liste 0)))
            '(= "a" (Nieme@ "a"))
        ) )

(let (Goods 0 Bads 0)
    (mapc
        '((BoolExpr)  # (println BoolExpr)
            (if (<> (eval BoolExpr) Faux)
                (if (<> 'or (car BoolExpr)) (inc 'Goods))
                (inc 'Bads)
                (println 'Error: BoolExpr 'Result:
                                     (if (<> 'let (car BoolExpr))
                                         (eval (caddr BoolExpr))
                                         (eval (caddr (caddr BoolExpr)))
                                     )
                )
            )
        ) tests)
    (println (pack "Tests: " (+ Goods Bads) ", Errors: " Bads))
    (if (= 0 Bads) (bye 0) (bye 1)) )
